#!/usr/bin/env python3
"""@package docstring
Small utility to generate a simple event loop macro

Usage: make_simple_event_loop.py > my_event_loop.cxx

Currently, the variables are just hardcoded python list
"""
#todo: make macro so it auto-generates and executes ROOT file
import os
import ROOT

macro_name = 'tmvadebug'
filenames = ['ntuples/kinbdt_masscut_idmvacut_sig.root']
tree_name = 'tree'
variables = [['photon_mva','F'],['min_dR','F'],['max_dR','F'],['pt_mass','F'],['cosTheta','F'],['costheta','F'],['phi','F'],['photon_res','F'],['photon_rapidity','F'],['l1_rapidity','F'],['l2_rapidity','F'],['photon_ptransverse','F'],['photon_pt_mass','F'],['w_lumi','F']]

def print_simple_event_loop():
  print('/*simple event loop generated by make_simple_event_loop.py')
  print(' * --put description of macro here--')
  print(' */')
  print('')
  print('void '+macro_name+'() {')
  print('  TChain tree("'+tree_name+'");')
  for filename in filenames:
    print('  tree.Add("'+filename+'");\n')
  for variable in variables:
    if variable[1]=='F':
      print('  float '+variable[0]+' = 0;');
  for variable in variables:
    if variable[1]=='F':
      print('  tree.SetBranchAddress("'+variable[0]+'", &'+variable[0]+');');
  print('')
  print('  for (long ievt = 0; ievt < tree.GetEntries(); ievt++) {')
  print('    tree.GetEntry(ievt);')
  print('  }')
  print('}')

def shuffle_events(filename, tree_name):
  new_filename = get_path(filename)+'/shuffled_'+get_filename_in_directory(filename)
  columns = get_tree_columns(filename, tree_name)
  out_file = open('shuffler_macro.cxx','w')
  out_file.write('void shuffler_macro() {')
  out_file.write('  TFile in_file("'+filename+'","READ");')
  out_file.write('  TTree* tree = static_cast<TTree*>(in_file.Get("'+tree_name+'"));')
  out_file.write('  TFile* out_file = new TFile("'+new_filename+'","RECREATE");')
  out_file.write('  TTree out_tree("'+tree_name+'","description");')
  for column in columns:
      out_file.write('  '+get_cpp_type(column[1])+' '+column[0]+' = 0;');
      if column[1]=='Float_t':
        out_file.write('  tree->SetBranchAddress("'+column[0]+'", &'+column[0]+');');
        out_file.write('  out_tree.Branch("'+column[0]+'", &'+column[0]+',"'+column[0]+'/'+get_root_type(column[1])+'");');
  out_file.write('')
  out_file.write('  std::cout << "Constructing random sequence\\n";')
  out_file.write('  std::vector<long> event_order;')
  out_file.write('  for (long ievt = 0; ievt < tree->GetEntries(); ievt++) {')
  out_file.write('    event_order.push_back(ievt);')
  out_file.write('  }')
  out_file.write('  std::random_shuffle(event_order.begin(),event_order.end());')
  out_file.write('  std::cout << "Shuffling events\\n";')
  out_file.write('  for (long ievt = 0; ievt < tree->GetEntries(); ievt++) {')
  out_file.write('    tree->GetEntry(event_order[ievt]);')
  out_file.write('    out_tree.Fill();')
  out_file.write('  }')
  out_file.write('  out_tree.Write();')
  out_file.write('  std::cout << "Wrote " << "'+new_filename+'" << "\\n";')
  out_file.write('  out_file->Close();')
  out_file.write('}')
  out_file.close()
  os.system('root -l shuffler_macro.cxx')
  os.system('rm shuffler_macro.cxx')

if __name__=='__main__':
  #print(get_tree_columns(filenames[0],'tree'))
  shuffle(filenames[0],'tree')
